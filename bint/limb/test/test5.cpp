#include <iostream>
#include <chrono>
#include <random>
#include <exception>
#include "../limb.hpp"

// if the two size are almost equal the fdivlong() is the fastest
// if the divisor is less than 10 limbs with the dividen fdivision() is the fastest
// if the divisor is below half of the digits of the dividen the operator/() is the fastest

// g++ test1.cpp -I"/home/lovelace/Documents/libraries/Cpp/precompiled/bignum_lin/include" -L"/home/lovelace/Documents/libraries/Cpp/precompiled/bignum_lin/lib" -lbint -o test1.o -O3 -march=native

using namespace backend_bigint;

typedef long used_type;

int main()
{
    // arithmetic operation test

    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    limb a("9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"),
         b("7782476738873246723468236476283468273648623846826482364876234682364836762384762384682364823657348563465743658436"
           "4385736865846573856347567658276384623472638476238764836476238462374672364826348762374623746364738723847847774647"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800"
           "9923948723468991236213517357657263537457235473846235465475127351283517265376152376512361253765612531316235716253"
           "3784687345634695624536985634694678346523683264723866666660000000000000000002342348672764234230472486778648712866"
           "2742483798424000000000000999423742342300000000000000000000000000000000000000000000000000000008273827387283787800");

    std::cout<<"a = "<<a<<"\n\n";
    std::cout<<"b = "<<b<<"\n\n";

    limb divlong;
    std::cout<<"\n";
    for(size_t i=0; i<5; ++i){
        auto start1 = std::chrono::high_resolution_clock::now();
        divlong = a.fdivlong(b);
        auto end1 = std::chrono::high_resolution_clock::now();
        auto duration1 = std::chrono::duration_cast<std::chrono::nanoseconds>(end1-start1);
        std::cout<<"a.fdivlong(b) proccess taken  : "<<duration1.count()<<" nanoseconds\n";
    }

    limb division;
    std::cout<<"\n";
    for(size_t i=0; i<5; ++i){
        auto start1 = std::chrono::high_resolution_clock::now();
        division = a.fdivision(b);
        auto end1 = std::chrono::high_resolution_clock::now();
        auto duration1 = std::chrono::duration_cast<std::chrono::nanoseconds>(end1-start1);
        std::cout<<"a.fdivision(b) proccess taken : "<<duration1.count()<<" nanoseconds\n";
    }

    limb bintdivision;
    std::cout<<"\n";
    for(size_t i=0; i<5; ++i){
        auto start1 = std::chrono::high_resolution_clock::now();
        bintdivision = a.fdivdigit(b);
        auto end1 = std::chrono::high_resolution_clock::now();
        auto duration1 = std::chrono::duration_cast<std::chrono::nanoseconds>(end1-start1);
        std::cout<<"a.fdivdigit(b) proccess taken : "<<duration1.count()<<" nanoseconds\n";
    }

    std::cout<<"\n\na = "<<a<<"\n";
    std::cout<<"\nb = "<<b<<"\n";

    std::cout<<"\na.fdivlong()  = "<<divlong<<"\n";
    std::cout<<"\na.fdivision() = "<<division<<"\n";
    std::cout<<"\na.fdivdigit() = "<<bintdivision<<"\n";

    if(divlong.string_form()==division.string_form() && division.string_form()==bintdivision.string_form())
    {
        std::cout<<"test 5 limb divisions are correct\n";
    }
    else throw std::logic_error("limb test 5 - wrong answers\n");

    return 0;
}

// arithmetic operation test

// unsigned seed = std::chrono::steady_clock::now().time_since_epoch().count();
    // std::mt19937_64 rand_engine(seed);
    // std::uniform_int_distribution<int> random_numberS(1,9);
    // std::uniform_int_distribution<int> random_number(0,9);
    
    // std::string num1 = std::to_string(random_numberS(rand_engine));
    // std::string num2 = std::to_string(random_numberS(rand_engine));

    // std::string bnum1 = num1;
    // std::string bnum2 = num2;

    // size_t NUM_LEN = 1000000;

    // bool testbinum1 = true, testbinum2 = true;

    // for(size_t i=0; i<NUM_LEN; ++i)
    // {
    //     int currand = random_number(rand_engine);
    //     std::string tos = std::to_string(currand);
    //     num1 = num1+tos;
    //     bnum1 = bnum1+tos;
    //     if(i/2>NUM_LEN/2 && testbinum1)
    //     {
    //         bnum1 = bnum1+".";
    //         testbinum1 = false;
    //     }
    // }

    // for(size_t i=0; i<NUM_LEN-1000; ++i)
    // {
    //     int currand = random_number(rand_engine);
    //     std::string tos = std::to_string(currand);
    //     num2 = num2+tos;
    //     bnum2 = bnum2+tos;
    //     if(i/2>(NUM_LEN-1000)/2 && testbinum2)
    //     {
    //         bnum2 = bnum2+".";
    //         testbinum2 = false;
    //     }
    // }

    // limb a(num1),
    //            b(num2);

    // bnum binta(bnum1),
    //      bintb(bnum2),
    //      bintc;